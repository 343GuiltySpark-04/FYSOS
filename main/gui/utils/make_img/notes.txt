This utility takes a list of file names and ID's, given by a resource file,
in this case, the files.txt file, and converts these .BMP files to a single
image resource file for use with the GUI_DEMO app.

You give a list of files as with the example below,  and this util will add
that .BMP's image data to the file.

ID_ICON_EXAMPLE0      , example0.bmp      , 0, 0
ID_ICON_EXAMPLE1      , example1.bmp      , 0, 0
ID_ICON_EXAMPLE2      , example2.bmp      , 0, 0
ID_ICON_EXAMPLE3      , example3.bmp      , 0, 0
etc                   , etc               , 0, 0

The first column is the ID macro name  which is matched in the 'ids.h' file
located in the GUI_DEMO source folder.

The second column is the name of the .BMP file to add.

The third column is a value and is used as the ID if the ID_* is not found.

The forth column is a value and indicates how many multi-part images are in
this image.  A value of 1 means  only one image.  Greater than 1 means that 
the next count of filenames are to be added to this image.   Each following 
image filename should  have this column  as zero.  Here is an  example of a 
single static image, with four (4) parts:

ID_MULTI_EXAMPLE      , example0.bmp      , 0, 4
ID_MULTI_EXAMPLE      , example1.bmp      , 0, 0
ID_MULTI_EXAMPLE      , example2.bmp      , 0, 0
ID_MULTI_EXAMPLE      , example3.bmp      , 0, 0

This utility will create one (1) Static_image entry  having four (4) images
within it.  At  this time, there is no  way to give a  delay count for each 
image.  A default value is given in GUI_DEMO.


You may add as many bmp files as you wish, simply adding the following code
to GUI_DEMO.

ids.h
  #define  ID_ICON_EXAMPLE0            12345

gui.h
  struct BUTTON example0;

gui.cpp
  obj_button(&example0, 0, GUIOBJ(owner_obj), ID_ICON_EXAMPLE0, 0);
  button_ownerdraw(&example0, ID_ICON_EXAMPLE0, 0, 0);

You now have a button object which is the size of the bmp image and will be
drawn as the image.


However, since this utility converts to GUI_DEMO specific PIXEL type pixels,
there are a few restrictions to the .BMP files.

 1. Must be standard Windows(R) style .BMP files.
 2. Must contain only one color plane.
 3. Must be 24-bit RGB images.
 4. Must not contain a separate color plane/pallet.
 5. Must use a 40 byte BITMAPINFOHEADER info header.
 6. Must not use compression of any kind.

There is an advantage here though. You can create an image a button or icon
object that is transparent. i.e.: You can create a non-rectangle icon using
transparency.  The object is still rectangle, it will just appear to not be.

If you place a RGB pixel value of 1,1,1 within your image this utility will
convert that pixel to the TRANSPARENT pixel GUI_DEMO uses therefore showing
the background pixel when displaying the object.

Please see the relevant  sections within the  book for more  information on 
bitmaps, transparency, buttons, icons, and objects.

The format of the file this utility creates is as follows:
  32 byte file header
  n count of 64 bytes entry headers
  z count of pixels

The file header  describes a bit about the remaining items.  Following that
is  a count of bitmap  entries describing  each bitmap and where  the pixel
data starts relative to the start of the file. Each entry follows the other.

Following the last entry, starts the pixel data for all bitmaps included in
this file.  There is no padding between each files bitmap stream. It is one
long stream  of pixels,  each bitmap  starting at the 'offset' field in its 
respective entry.

This pixel stream can be compressed, if specified, using RLE encoding. This
compression and  encoding is on the whole  stream of pixels, not individual 
bitmap data.  The file header and all the  entry headers are *not* included
in the compression.
